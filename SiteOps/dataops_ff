#!/bin/sh
#
# This only works for ENSTORE and, perhaps, T1_US_FNAL_Buffer/MSS in particular
#
# It takes the output from get_ff.py and generates and executes the commands
# to setup the sub directories and tags

CMS=/pnfs/fs/usr/cms/WAX/11
LIBRARY=CD-LTO8G1

if [ "${1:-}x" = "x"  ]; then echo ERROR - Usage = $0 "<file containing pnfs directories starting with /store and file_family_name for that directory> <check|set> <tight|loose>"; exit 1;fi
if [ ! -r $1 ];          then echo ERROR - Can not read file $1; exit 1;fi
# execute this routine as /home/enstore/dcache-deploy/dcache-fermi-config/cms/dataops_ff <file> <check|set>

# example of file:
#/store/mc/Spring11/JPsiToMuMu_2MuPEtaFilter_8TeV-pythia6-evtgen/GEN-SIM       Spring10MCGenSimRaw
#/store/mc/Spring11/QCD_MuPt5EtaFilter_8TeV-pythia6/GEN-SIM                    Spring10MCGenSimRaw


# $3 - either tight or loose, to set protections of pnfs directories.   
case ${3:-tight} in
tight) base_prot=755; upper_prot=555; ;;
vtite) base_prot=700; upper_prot=700; ;;
loose) base_prot=755; upper_prot=755; ;;
*) echo ERROR - invalid 3rd parameter. echo ERROR - Usage = $0 "<file containing pnfs directories starting with /store and file_family_name for that directory> <check|set> <tight|loose>"; exit 1; ;;
esac


# sanity check on file
cat $1 | while read d ff x; do
   if [ `echo $d | grep -c '^/store/'` -ne 1 ]; then
      echo ERROR.  1st argument needs to start with /store/ ..... $d $ff $x
      exit 1
   fi
   if [ -n "${x:-}" ]; then
      echo "ERROR. Only 2 parameters allow <path> <ff> .....  $d $ff $x"
      exit 1
   fi
done


# $1 = file with diretory name (starting with /store) and file_family name 
case ${2:-check}  in  # $2= check or set or open2 or open3

check)
   cat $1 | while read d ff; do
       rm -f /tmp/doff.1 /tmp/doff.2
       p=$CMS; echo $d | sed -e 's@/@ @g'  >| /tmp/doff.1; for i in `cat /tmp/doff.1`; do p=$p/$i; echo $p;done >| /tmp/doff.2; tac /tmp/doff.2 | grep -v "$CMS/store$" >| /tmp/doff.1
          echo $CMS/$d
          (
           for here in `cat /tmp/doff.1`; do 
             if [ -d $here ]; then 
               cd $here
               if [ "$PWD" = "$CMS$d" ]; then 
                 #l=`ls -ld $PWD | sed -e "s%$CMS/store%%"`
                  l=`ls -ld $PWD | sed -e "s%$CMS%%" | sed -e "s%/store.*/%%"`
               else 
                  l=`ls -ld $PWD | sed -e "s%$CMS%%" | sed -e "s%/store.*/%%"`
               fi
               tags=`enstore pnfs --tags $PWD | grep -v /pnfs | sed -e 's/.(tag)//g' -e 's/(//g' -e 's/)//g' -e 's/ = /=/g' -e 's/library/lib/' -e 's/file_family_wrapper/wrap/' -e 's/file_family_width/wid/' -e 's/storage_group/grp/' -e 's/file_family/fam/'`
               printf "%-100s     %-20s %-15s %-8s %-8s %-30s \n" "$l" $tags
             else
               echo `echo $here | sed -e "s%$CMS%%"` does not exist
             fi
           done
           rm -f /tmp/doff.1 /tmp/doff.2
          )
       echo
   done
   ;;

set)
   cat $1 | while read d ff; do
       # check if the top level directory is set
       td=`echo $d | cut -d '/' -f 1,2,3,4`
       if [ ! -r $CMS$td ]
       then
           echo mkdir -p $CMS$td
                mkdir -p $CMS$td
           # now check if the library is set correctly
           (
               cd $CMS$td
               if [ "`enstore pnfs --library`x" == "UNSET_LIBRARYx" ]
               then
                   echo enstore pnfs --library $LIBRARY
                   enstore pnfs --library $LIBRARY
               fi
           )
       fi
       if [ ! -r $CMS$d ]; then 
          echo mkdir -p $CMS$d
               mkdir -p $CMS$d
       fi
       (
        if [ $ff != "inherit" ]; then 
           echo cd $CMS$d
                cd $CMS$d 
           echo enstore pnfs --file-family $ff
                enstore pnfs --file-family $ff
        fi
       )
#      (
#       echo cd $CMS$d
#            cd $CMS$d
#       prot=$base_prot
#       while [ "`pwd`" != "$CMS/store" ]; do
#         echo chmod $prot $PWD
#              chmod $prot $PWD
#         prot=$upper_prot
#         echo chown cmsprod:us_cms $PWD
#              chown cmsprod:us_cms $PWD
#         echo cd ..
#              cd ..
#       done
#      )
# LFN: /store/<data/mc>/<acq era>/<PD/MC process>/<data tier>/<processing version>/<....sub directories and root file>
       dtokens=`echo $d | sed -e 's&/& &g'` 
       n=0
       prot=$upper_prot
       (
        cd $CMS
        for d1 in $dtokens; do
            n=`expr $n + 1`
            if [ $n -ge 5 ]; then prot=$base_prot; fi
            cd $d1
            echo chmod $prot $PWD
                 chmod $prot $PWD
            echo chown cmsprod:us_cms $PWD
                 chown cmsprod:us_cms $PWD
        done
       )
   done
   ;;

ownprot)
   cat $1 | while read d ff; do
       dtokens=`echo $d | sed -e 's&/& &g'` 
       n=0
       prot=$upper_prot
       (
        cd $CMS
        for d1 in $dtokens; do
            n=`expr $n + 1`
            if [ $n -ge 5 ]; then prot=$base_prot; fi
            cd $d1
            echo chmod $prot $PWD
                 chmod $prot $PWD
            echo chown cmsprod:us_cms $PWD
                 chown cmsprod:us_cms $PWD
        done
       )
   done
   ;;


prot)
   cat $1 | while read d ff; do
       if [ ! -r $CMS$d ]; then 
          echo ERROR $CMS$d does not exist
          exit 1
       fi
# LFN: /store/<data/mc>/<acq era>/<PD/MC process>/<data tier>/<processing version>/<....sub directories and root file>
       dtokens=`echo $d | sed -e 's&/& &g'` 
       n=0
       prot=$upper_prot
       (
        cd $CMS >/dev/null
        for d1 in $dtokens; do
            n=`expr $n + 1`
            if [ $n -ge 5 ]; then prot=$base_prot; fi
            cd $d1 >/dev/null
           #echo chmod $prot $PWD
                 chmod $prot $PWD
        done
        cd $CMS
        for d1 in $dtokens; do
            cd $d1 >/dev/null
            ls -ld $PWD
        done
       )
   done
   ;;


open2)
   cat $1 | while read d ff; do
       (
        prot=$base_prot
        echo cd $CMS$d
             cd $CMS$d
        echo chmod $prot $PWD
             chmod $prot $PWD
        echo cd ..
             cd ..
        echo chmod $prot $PWD
             chmod $prot $PWD
       )
       echo
   done
   ;;

open3)
   cat $1 | while read d ff; do
       (
        prot=$base_prot
        echo cd $CMS$d
             cd $CMS$d
        echo chmod $prot $PWD
             chmod $prot $PWD
        echo cd ..
             cd ..
        echo chmod $prot $PWD
             chmod $prot $PWD
             cd ..
        echo chmod $prot $PWD
             chmod $prot $PWD
       )
       echo
   done
   ;;

*)
  echo $2 is an unknown parameter 2 command, only check and set are valid
  exit 1
  ;;
esac
