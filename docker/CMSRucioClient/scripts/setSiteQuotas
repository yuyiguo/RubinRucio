#! /usr/bin/env python3


from __future__ import absolute_import, division, print_function

import io
import json
import os
import time

import requests
from rucio.client.client import Client
from rucio.common.exception import RSENotFound

SKIP_SITES = ['T3_US_NERSC']
QUERY_HEADER = '{"search_type":"query_then_fetch","ignore_unavailable":true,"index":["monit_prod_cmssst_*"]}'

with open('capacity_lucene.json', 'r') as lucene_json:
    lucene = json.load(lucene_json)

lucene["query"]["bool"]["filter"]["range"]["metadata.timestamp"]["gte"] = int(time.time() - 24 * 60 * 60)
lucene["query"]["bool"]["filter"]["range"]["metadata.timestamp"]["lt"] = int(time.time() + 900)

query = io.StringIO(QUERY_HEADER + '\n' + json.dumps(lucene) + '\n')

headers = {'Authorization': 'Bearer %s' % os.environ['MONIT_TOKEN'],
           'Content-Type': 'application/json'}

r = requests.post('https://monit-grafana.cern.ch/api/datasources/proxy/9475/_msearch', data=query, headers=headers)

j = json.loads(r.text)

sites = sorted(list(set([record['_source']['data'] for record in j['responses'][0]['hits']['hits']])))

rucio = Client()
for site in sites:
    rse = site['name']
    if rse in SKIP_SITES:
        continue
    terabytes = int(site['disk_experiment_use'])
    byte_limit = terabytes * 1E12
    print('Setting quota at %s to %6.0f TB' % (rse, terabytes))
    try:
        rucio.get_rse(rse)
        rucio.set_account_limit(account='transfer_ops', rse=rse, bytes=byte_limit, locality='local')
    except RSENotFound:
        try:
            rucio.get_rse(rse + '_Disk')
            rucio.set_account_limit(account='transfer_ops', rse=rse + '_Disk', bytes=byte_limit, locality='local')
            print('  Set the quota at %s to %6.0f TB' % (rse + '_Disk', terabytes))
        except RSENotFound:
            print('  Could not find %s or %s' % (rse, rse + '_Disk'))
